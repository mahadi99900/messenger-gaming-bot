// game.js
const db = require("./database.js");

const ANIMALS = [
    { name: 'Frog', icon: 'üê∏', base_power: 4 }, { name: 'Mouse', icon: 'üêÅ', base_power: 5 },
    { name: 'Chicken', icon: 'üêî', base_power: 6 }, { name: 'Rabbit', icon: 'üêá', base_power: 8 },
    { name: 'Cat', icon: 'üêà', base_power: 10 }, { name: 'Dog', icon: 'üêï', base_power: 12 },
    { name: 'Fox', icon: 'ü¶ä', base_power: 15 }, { name: 'Horse', icon: 'üêé', base_power: 18 },
    { name: 'Deer', icon: 'ü¶å', base_power: 20 }, { name: 'Eagle', icon: 'ü¶Ö', base_power: 22 },
    { name: 'Bear', icon: 'üêª', base_power: 25 }, { name: 'Boar', icon: 'üêó', base_power: 28 },
    { name: 'Wolf', icon: 'üê∫', base_power: 30 }, { name: 'Gorilla', icon: 'ü¶ç', base_power: 35 },
    { name: 'Leopard', icon: 'üêÜ', base_power: 45 }, { name: 'Crocodile', icon: 'üêä', base_power: 48 },
    { name: 'Lion', icon: 'ü¶Å', base_power: 50 }, { name: 'Shark', icon: 'ü¶à', base_power: 52 },
    { name: 'Tiger', icon: 'üêÖ', base_power: 55 }, { name: 'Elephant', icon: 'üêò', base_power: 60 },
    { name: 'Rhino', icon: 'ü¶è', base_power: 65 }, { name: 'Whale', icon: 'üêã', base_power: 75 },
    { name: 'Unicorn', icon: 'ü¶Ñ', base_power: 80 }, { name: 'Phoenix', icon: 'üî•', base_power: 90 },
    { name: 'Dragon', icon: 'üêâ', base_power: 100 },
];
const ANIMAL_QUALITIES = { 'F': 0.5, 'D': 0.8, 'C': 1.0, 'B': 1.2, 'A': 1.5, 'S': 2.0 };

function calculateTotalPower(playerData) {
    if (!playerData || !playerData.zoo || playerData.zoo.length === 0) return 0;
    return playerData.zoo.reduce((total, animal) => total + (animal.power || 0), 0);
}

function calculateLevel(xp) {
    return Math.floor(Math.sqrt(xp / 100)) + 1;
}

module.exports = function handleGameCommand(api, event, config) {
    const senderID = event.senderID;
    const prefix = config.PREFIX; // config ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    
    api.getUserInfo(senderID, async (err, ret) => {
        if (err) return console.error(err);
        const userName = ret[senderID].name;
        await db.ensureUserData(senderID, userName);

        const message = event.body;
        if (!message.startsWith(prefix)) return;

        const args = message.slice(prefix.length).trim().split(/ +/);
        const command = args.shift().toLowerCase();
        
        const data = db.loadData();
        const playerData = data[senderID];
        
        // config.json ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡ßá‡¶Æ‡ßá‡¶∞ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
        const gameSettings = config.gameSettings;

        try {
            if (command === "profile") {
                const totalPower = calculateTotalPower(playerData);
                const level = calculateLevel(playerData.xp);
                const profileMessage = `üë§ **Player Profile: ${playerData.name}**
üèÖ Level: ${level} (XP: ${playerData.xp})
üí∞ Coins: ${playerData.coins}
üêæ Animals: ${playerData.zoo.length}
üí• Total Power: ${totalPower}
üçÄ Luck: ${(playerData.luck || 1.0).toFixed(2)}`;
                api.sendMessage(profileMessage, event.threadID, event.messageID);

            } else if (command === "hunt") {
                const currentTime = Date.now() / 1000;
                if (currentTime - (playerData.last_hunt || 0) < gameSettings.huntCooldown) {
                    return api.sendMessage(`‚è≥ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶®‡ßç‡¶§‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`, event.threadID, event.messageID);
                }
                const foundAnimalBase = ANIMALS[Math.floor(Math.random() * ANIMALS.length)];
                const luck = playerData.luck || 1.0;
                const weightedQualities = ['F', 'F', 'D', 'D', 'D', 'C', 'C', 'C', 'C', 'B', 'B', 'A'];
                if (luck > 1.2) weightedQualities.push('A', 'S');
                if (luck > 1.5) weightedQualities.push('S', 'S');
                const foundQuality = weightedQualities[Math.floor(Math.random() * weightedQualities.length)];
                const finalPower = Math.floor(foundAnimalBase.base_power * ANIMAL_QUALITIES[foundQuality]);
                const newAnimal = {
                    uid: Date.now().toString(36) + Math.random().toString(36).substr(2, 5),
                    name: foundAnimalBase.name, icon: foundAnimalBase.icon,
                    quality: foundQuality, power: finalPower
                };
                playerData.zoo.push(newAnimal);
                playerData.last_hunt = currentTime;
                playerData.xp += 15;
                const huntMessage = `üèûÔ∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø [${foundQuality}]-‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ **${foundAnimalBase.name}** ${foundAnimalBase.icon} ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®!\n\nüí• ‡¶∂‡¶ï‡ßç‡¶§‡¶ø: ${finalPower}\n‚≠ê ‡ßß‡ß´ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶ø ‡¶Ö‡¶∞‡ßç‡¶ú‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`;
                api.sendMessage(huntMessage, event.threadID, event.messageID);

            } else if (command === "zoo") {
                if (playerData.zoo.length === 0) return api.sendMessage("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡¶ø‡ßú‡¶ø‡ßü‡¶æ‡¶ñ‡¶æ‡¶®‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø!", event.threadID, event.messageID);
                const totalPower = calculateTotalPower(playerData);
                let zooMessage = `üêæ **${playerData.name}-‡¶è‡¶∞ ‡¶ö‡¶ø‡ßú‡¶ø‡ßü‡¶æ‡¶ñ‡¶æ‡¶®‡¶æ** üêæ\n‡¶Æ‡ßã‡¶ü ‡¶∂‡¶ï‡ßç‡¶§‡¶ø: ${totalPower}\n\n`;
                playerData.zoo.sort((a, b) => b.power - a.power);
                playerData.zoo.forEach(animal => {
                    zooMessage += `‚Ä¢ ${animal.icon} ${animal.name} | ‡¶∂‡¶ï‡ßç‡¶§‡¶ø: ${animal.power} | ‡¶Ü‡¶á‡¶°‡¶ø: ${animal.uid}\n`;
                });
                api.sendMessage(zooMessage, event.threadID);

            } else if (command === "sell") {
                if (args.length === 0) return api.sendMessage(`‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ${prefix}sell <animal_ID>`, event.threadID, event.messageID);
                const animalUID = args[0];
                const animalIndex = playerData.zoo.findIndex(a => a.uid === animalUID);
                if (animalIndex === -1) return api.sendMessage(`‚ùå ‡¶è‡¶á ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶æ‡¶£‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: ${animalUID}`, event.threadID, event.messageID);
                const animalToSell = playerData.zoo[animalIndex];
                const sellPrice = Math.floor(animalToSell.power / 2);
                playerData.coins += sellPrice;
                playerData.zoo.splice(animalIndex, 1);
                api.sendMessage(`‚úÖ ${animalToSell.icon} ${animalToSell.name} ‡¶™‡ßç‡¶∞‡¶æ‡¶£‡ßÄ‡¶ü‡¶ø ${sellPrice} ‡¶ï‡ßü‡ßá‡¶®‡ßá‡¶∞ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Æ‡ßü‡ßá ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`, event.threadID, event.messageID);

            } else if (command === "claim") {
                const currentTime = Date.now() / 1000;
                if (currentTime - (playerData.last_claim || 0) < gameSettings.claimCooldown) {
                    return api.sendMessage(`‚è≥ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ï‡ßç‡¶≤‡ßá‡¶á‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`, event.threadID, event.messageID);
                }
                playerData.coins += gameSettings.claimAmount;
                playerData.last_claim = currentTime;
                api.sendMessage(`üéâ ‡¶Ü‡¶™‡¶®‡¶ø ${gameSettings.claimAmount} ‡¶ï‡ßü‡ßá‡¶® ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®!`, event.threadID, event.messageID);

            } else if (command === "pray") {
                const currentTime = Date.now() / 1000;
                if (currentTime - (playerData.last_pray || 0) < gameSettings.prayCooldown) {
                    return api.sendMessage(`üôè ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶∞‡ßç‡¶•‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§`, event.threadID, event.messageID);
                }
                playerData.luck = (playerData.luck || 1.0) + 0.1;
                playerData.last_pray = currentTime;
                api.sendMessage(`‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶ó‡ßç‡¶Ø ‡¶¨‡ßá‡ßú‡ßá ${playerData.luck.toFixed(2)} ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`, event.threadID, event.messageID);

            } else if (command === "give") {
                const recipientID = Object.keys(event.mentions)[0];
                const amount = parseInt(args[1], 10);
                if (!recipientID || !amount || amount <= 0) return api.sendMessage(`‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ${prefix}give @mention <amount>`, event.threadID, event.messageID);
                if (playerData.coins < amount) return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á‡•§", event.threadID, event.messageID);
                if (!data[recipientID]) return api.sendMessage("‚ùå ‡¶è‡¶á ‡¶ñ‡ßá‡¶≤‡ßã‡ßü‡¶æ‡ßú‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§", event.threadID, event.messageID);
                const recipientData = data[recipientID];
                
                playerData.coins -= amount;
                recipientData.coins += amount;
                api.sendMessage(`‚úÖ ${recipientData.name}-‡¶ï‡ßá ${amount} ‡¶ï‡ßü‡ßá‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`, event.threadID, event.messageID);
                
            } else if (command === "leaderboard") {
                const sortedPlayers = Object.values(data).sort((a, b) => b.coins - a.coins);
                let lbMessage = "üèÜ **‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ß‡¶®‡ßÄ ‡¶ñ‡ßá‡¶≤‡ßã‡ßü‡¶æ‡ßú‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ** üèÜ\n\n";
                sortedPlayers.slice(0, 10).forEach((p, i) => {
                    lbMessage += `${i + 1}. ${p.name} - ${p.coins} ‡¶ï‡ßü‡ßá‡¶®\n`;
                });
                api.sendMessage(lbMessage, event.threadID);
            
            } else if (command === "battle") {
                const opponentID = Object.keys(event.mentions)[0];
                if (opponentID) { 
                    if (!data[opponentID]) return api.sendMessage("‡¶è‡¶á ‡¶ñ‡ßá‡¶≤‡ßã‡ßü‡¶æ‡ßú ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ó‡ßá‡¶Æ‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá‡¶®‡¶ø‡•§", event.threadID, event.messageID);
                    const opponentData = data[opponentID];
                    
                    if (playerData.coins < gameSettings.battleCoinRequirement) return api.sendMessage(`PvP ‡¶Ø‡ßÅ‡¶¶‡ßç‡¶ß‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${gameSettings.battleCoinRequirement} ‡¶ï‡ßü‡ßá‡¶® ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡•§`, event.threadID, event.messageID);
                    if (opponentData.coins < gameSettings.battleCoinRequirement) return api.sendMessage(`‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶™‡¶ï‡ßç‡¶∑‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá PvP ‡¶Ø‡ßÅ‡¶¶‡ßç‡¶ß‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ (${gameSettings.battleCoinRequirement}) ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á‡•§`, event.threadID, event.messageID);
                    
                    const playerPower = calculateTotalPower(playerData);
                    const opponentPower = calculateTotalPower(opponentData);
                    let resultMessage = `‚öîÔ∏è **‡¶Ø‡ßÅ‡¶¶‡ßç‡¶ß‡ßá‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤** ‚öîÔ∏è\n\n${playerData.name}-‡¶è‡¶∞ ‡¶∂‡¶ï‡ßç‡¶§‡¶ø: ${playerPower}\n${opponentData.name}-‡¶è‡¶∞ ‡¶∂‡¶ï‡ßç‡¶§‡¶ø: ${opponentPower}\n\n`;
                    
                    if (playerPower >= opponentPower) {
                        playerData.coins += gameSettings.battleCoinRequirement; opponentData.coins -= gameSettings.battleCoinRequirement;
                        playerData.xp += gameSettings.playerXpForWin; opponentData.xp += gameSettings.playerXpForLoss;
                        resultMessage += `üéâ **${playerData.name} ‡¶¨‡¶ø‡¶ú‡ßü‡ßÄ!**`;
                    } else {
                        opponentData.coins += gameSettings.battleCoinRequirement; playerData.coins -= gameSettings.battleCoinRequirement;
                        opponentData.xp += gameSettings.playerXpForWin; playerData.xp += gameSettings.playerXpForLoss;
                        resultMessage += `üéâ **${opponentData.name} ‡¶¨‡¶ø‡¶ú‡ßü‡ßÄ!**`;
                    }
                    api.sendMessage(resultMessage, event.threadID);

                } else { 
                    const playerPower = calculateTotalPower(playerData);
                    if (playerPower === 0) return api.sendMessage("‡¶Ø‡ßÅ‡¶¶‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶æ‡¶£‡ßÄ ‡¶®‡ßá‡¶á!", event.threadID, event.messageID);
                    const botPower = Math.floor(playerPower * (Math.random() * (1.3 - 0.7) + 0.7));
                    let resultMessage = `‚öîÔ∏è **‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶¶‡ßç‡¶ß** ‚öîÔ∏è\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∂‡¶ï‡ßç‡¶§‡¶ø: ${playerPower}\n‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∂‡¶ï‡ßç‡¶§‡¶ø: ${botPower}\n\n`;
                    if (playerPower >= botPower) {
                        playerData.xp += gameSettings.pveXpForWin;
                        resultMessage += `üéâ **‡¶Ü‡¶™‡¶®‡¶ø ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá‡¶®!** ‡¶Ü‡¶™‡¶®‡¶ø ${gameSettings.pveXpForWin} ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶ø ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§`;
                    } else {
                        resultMessage += `üíî **‡¶Ü‡¶™‡¶®‡¶ø ‡¶π‡ßá‡¶∞‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®!**`;
                    }
                    api.sendMessage(resultMessage, event.threadID, event.messageID);
                }

            } else if (command === "slots" || command === "bet") {
                const amount = parseInt(args[0], 10);
                if (!amount || amount <= 0) return api.sendMessage(`‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ${prefix}${command} <amount>`, event.threadID, event.messageID);
                if (playerData.coins < amount) return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á‡•§", event.threadID, event.messageID);
                
                playerData.coins -= amount;
                const emojis = ['üçí', 'üçä', 'üçã', 'üîî', 'üíé', 'üí∞'];
                const results = [emojis[Math.floor(Math.random() * emojis.length)], emojis[Math.floor(Math.random() * emojis.length)], emojis[Math.floor(Math.random() * emojis.length)]];
                
                let winnings = 0;
                let outcomeMessage = "";

                if (results[0] === results[1] && results[1] === results[2]) {
                    winnings = amount * 10;
                    outcomeMessage = `üéä ‡¶ú‡ßç‡¶Ø‡¶æ‡¶ï‡¶™‡¶ü! ‡¶Ü‡¶™‡¶®‡¶ø ${winnings} ‡¶ï‡ßü‡ßá‡¶® ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá‡¶®!`;
                } else if (results[0] === results[1] || results[1] === results[2]) {
                    winnings = amount * 2;
                    outcomeMessage = `üéâ ‡¶õ‡ßã‡¶ü ‡¶ú‡ßü! ‡¶Ü‡¶™‡¶®‡¶ø ${winnings} ‡¶ï‡ßü‡ßá‡¶® ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá‡¶®!`;
                } else {
                    outcomeMessage = "üíî ‡¶Ü‡¶™‡¶®‡¶ø ‡¶π‡ßá‡¶∞‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®!";
                }

                if (winnings > 0) playerData.coins += winnings;

                api.sendMessage(`üé∞ ‡¶Ü‡¶™‡¶®‡¶ø ${amount} ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡ßá‡¶õ‡ßá‡¶®...\n| ${results.join(' | ')} |\n\n${outcomeMessage}`, event.threadID, event.messageID);
            }

            await db.saveData(data);

        } catch (e) {
            console.error("‡¶ó‡ßá‡¶Æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:", e);
            api.sendMessage("üò• ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶ó‡ßá‡¶Æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", event.threadID);
        }
    });
};